#!/usr/bin/python3
import sys
import os
import subprocess

def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    main_script = os.path.join(script_dir, "main.py")

    if os.geteuid() != 0:
        # Store current user's display info
        display = os.environ.get('DISPLAY', ':0')
        xauth = os.environ.get('XAUTHORITY', '')
        user = os.environ.get('USER', '')

        try:
            if sys.stdin.isatty():
                # Running from terminal - use sudo with -E to preserve environment
                subprocess.call(['sudo', '-E', sys.executable, __file__, display, xauth, user])
            else:
                # Running from GUI - use a different approach
                # Create a script that pkexec can run
                temp_script = f'/tmp/clevo-launcher-{os.getpid()}.sh'
                with open(temp_script, 'w') as f:
                    f.write(f'''#!/bin/bash
export DISPLAY="{display}"
export XAUTHORITY="{xauth}"
export USER="{user}"
cd "{script_dir}"
python3 "{main_script}"
''')
                os.chmod(temp_script, 0o755)
                result = subprocess.call(['pkexec', temp_script])
                os.unlink(temp_script)
                sys.exit(result)
        except Exception as e:
            print(f"Error: {e}")
            sys.exit(1)
    else:
        # Running as root - set up environment if passed as args
        if len(sys.argv) > 3:
            os.environ['DISPLAY'] = sys.argv[1]
            os.environ['XAUTHORITY'] = sys.argv[2]
            os.environ['USER'] = sys.argv[3]

        # Running as root - execute the main script
        os.chdir(script_dir)
        sys.path.insert(0, script_dir)

        # Import and run main.py as a module
        import importlib.util
        spec = importlib.util.spec_from_file_location("main", main_script)
        main_module = importlib.util.module_from_spec(spec)
        sys.modules["main"] = main_module
        spec.loader.exec_module(main_module)

if __name__ == "__main__":
    main()